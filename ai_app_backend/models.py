"""
SQLAlchemy models defining the database schema for candidates and their answers.

Each Candidate can have multiple Answer records.  Answers store both the
candidate's response and any evaluation generated by the AI system.
"""

from datetime import datetime
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, Float
from sqlalchemy.orm import relationship

from database import Base


class Candidate(Base):
    """Represents a job applicant."""

    __tablename__ = "candidates"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    phone = Column(String, nullable=False)
    created_at = Column(DateTime, default=datetime.utcnow)
    evaluation_status = Column(String, default='pending')  # pending, processing, completed, failed

    # One-to-many relationship to answers
    answers = relationship(
        "Answer", back_populates="candidate", cascade="all, delete-orphan"
    )


class Answer(Base):
    """Stores an individual answer to a question from a candidate."""

    __tablename__ = "answers"

    id = Column(Integer, primary_key=True, index=True)
    candidate_id = Column(Integer, ForeignKey("candidates.id"), nullable=False)

    # Question ID and text stored for reference
    question_id = Column(Integer, nullable=False)
    question = Column(String, nullable=False)
    type = Column(String, nullable=False)  # 'mc' or 'text'

    # Raw response fields.  For multiple choice, `selected` stores the letter.
    selected = Column(String, nullable=True)
    answer_text = Column(String, nullable=True)

    # Evaluation fields.  Populated after running the AI evaluator.
    evaluation_score = Column(Float, nullable=True)
    evaluation_feedback = Column(String, nullable=True)
    
    # Ideal answer for comparison (for text questions)
    ideal_answer = Column(String, nullable=True)
    
    # Evaluation status tracking
    evaluation_status = Column(String, default='pending')  # pending, processing, completed, failed

    # Relationship back to candidate
    candidate = relationship("Candidate", back_populates="answers")